//Queries used:

//Q1:
MATCH (c:Case) <-[:EVENT_TO_CASE]- (e:Event)
WHERE c.name = "Application_681547497" AND e.activity = "A_Submitted"
RETURN e.completetime

//Q2:
MATCH (c:Case) <-[:OFFER_TO_CASE]- (o:Offer)
WHERE c.name = "Application_681547497"
RETURN o.name, o.offeredamount

//Q3: 
MATCH (c:Case)
WHERE c.name = "Application_681547497"
RETURN c.requestedamount

//Q4:
MATCH (c:Case) <-[:EVENT_TO_CASE]- (e:Event)

WHERE c.name = "Application_681547497" AND e.activity = "A_Submitted"

RETURN e.completetime, c.loangoal

//Q5:
MATCH (c:Case) <-[:EVENT_TO_CASE]- (e:Event)
WHERE  e.activity = "A_Submitted"
RETURN e.completetime, c.loangoal

//Q6:
MATCH (c:Case) <-[:EVENT_TO_CASE]- (e1:Event) <-[:DF]- (e2:Event)
WHERE c.name = "Application_681547497" AND e1.activity = "A_Submitted" 
RETURN e1, e2

//Q7:
MATCH (o:Offer) <-[:EVENT_TO_OFFER]- (e1:Event) <-[:O_DF]- (e2:Event)
WHERE o.name = "Offer_716078829" AND e1.activity = "O_Created" 
RETURN e1, e2

//Q9:
MATCH (c:Case) <-[:EVENT_TO_CASE]- (e1:Event) <-[:DF*]- (e2:Event)
WHERE c.name = "Application_681547497" AND e1.activity = "A_Submitted" AND e2.activity = "A_Accepted"
RETURN e1, e2

//Q9-2 EF-relation with path:
MATCH (c:Case) <-[:EVENT_TO_CASE]- (e1:Event) <-[:DF*]- (e2:Event)
WHERE c.name = "Application_681547497" AND e1.activity = "A_Submitted" AND e2.activity = "A_Accepted"
RETURN (e1:Event) <-[:DF*]- (e2:Event)

//Q10:
MATCH (o:Offer) <-[:EVENT_TO_OFFER]- (e1:Event) <-[:O_DF*]- (e2:Event)

WHERE o.name = "Offer_716078829" AND e1.activity = "O_Created" AND e2.activity = "O_Cancelled"
RETURN e1, e2

//Q11:
MATCH (o:Offer) <-[:EVENT_TO_OFFER]- (e1:Event) <-[:O_DF*]- (e2:Event)

WHERE e1.activity = "O_Created" AND e2.activity = "O_Cancelled"
RETURN e1, e2

//Q12 for specific case only:
MATCH (c:Case)
WHERE c.name = 'Application_681547497'
RETURN c.variant

//Q12-2:
MATCH (c:Case)
WITH c.variant as variant, count(*) AS count
ORDER BY count DESC
LIMIT 1
MATCH (c:Case)
WHERE c.variant = variant
RETURN c.name, variant, count

//Q13:
MATCH (c:Case) <-[:EVENT_TO_CASE]- (e:Event) <-[:DF*]- (e2:Event)
WHERE NOT ()<-[:DF]-(e) AND NOT (e2)<-[:DF]-() AND c.name = 'Application_681547497'
RETURN (e:Event) <-[:DF*]- (e2:Event) AS paths

//Q14:
MATCH  p = (r1) -[:HOW]-> (r2)
RETURN p

//Q14-2 with counting frequencies of handovers edge::
MATCH (r1:Resource) -[:RESOURCE_TO_EVENT]-> (e1:Event) <-[:DF]- (e2:Event) <-[:RESOURCE_TO_EVENT]- (r2:Resource)
RETURN r1 AS from, r2 AS to, count(*) AS frequency
ORDER BY frequency DESC

//Q15:
MATCH p = (r1) -[:O_HOW]-> (r2)
RETURN p

//Q15 with counting of frequencies of offer-handovers edge:
MATCH (r1:Resource) -[:RESOURCE_TO_EVENT]-> (e1:Event) <-[:O_DF]- (e2:Event) <-[:RESOURCE_TO_EVENT]- (r2:Resource)
RETURN r1 AS from, r2 AS to, count(*) AS frequency
ORDER BY frequency DESC

//Q16:
MATCH (start:Event {activity: "O_Created"}) -[:EVENT_TO_OFFER]-> (o:Offer) <-[:EVENT_TO_OFFER]- (end:Event {activity: "O_Accepted"})
WITH start, end, duration.between(start.completetime, end.starttime) AS time, o
ORDER BY duration.between(start.completetime, end.starttime) DESC
LIMIT 1
RETURN start, end, time.days AS days, (toFloat(time.minutes)/60) AS hours, o

//Q17:
MATCH (start:Event {activity: "O_Created"}) -[:EVENT_TO_OFFER]-> (:Offer) <-[:EVENT_TO_OFFER]- (end:Event {activity: "O_Accepted"})
MATCH p = (start) -[:DF*] - (end) 
RETURN length(p),  (:Offer) <-[:EVENT_TO_OFFER]- (end) 
ORDER BY length(p) DESC
LIMIT 1

//Q18:
MATCH (start:Event {activity: "O_Created"}) -[:EVENT_TO_OFFER]-> (o:Offer) <-[:EVENT_TO_OFFER]- (end:Event {activity: "O_Accepted"})
MATCH p = (start) -[:O_DF*] - (end)
RETURN length(p), (:Offer) <-[:EVENT_TO_OFFER]- (end) 
ORDER BY length(p) DESC
LIMIT 1

//Q19 (full graph needed, no suitable sample in sample set):
MATCH  (e1:Event {activity: "O_Created"})<-[:O_DF]-(e2:Event {activity: "O_Cancelled"}) -[:EVENT_TO_OFFER]-> (o:Offer) -[rel:OFFER_TO_CASE]-> (c:Case)
WITH  c AS c, count(o) AS ct
WHERE ct > 1
MATCH (:Event {activity: "O_Created"})<-[:O_DF]-(e:Event {activity: "O_Cancelled"}) -[:EVENT_TO_OFFER]-> (o:Offer) -[rel:OFFER_TO_CASE]-> (c)
WITH  e AS O_Cancelled
MATCH p = (A_Created:Event {activity: "A_Create Application"}) <-[:DF*]-(O_Cancelled:Event {activity: "O_Cancelled"})
RETURN p

//with case and offer in output (for evaluation/comparison with the python script)
MATCH  (e1:Event {activity: "O_Created"})<-[:O_DF]-(e2:Event {activity: "O_Cancelled"}) -[:EVENT_TO_OFFER]-> (o:Offer) -[rel:OFFER_TO_CASE]-> (c:Case)
WITH  c AS c, count(o) AS ct
WHERE ct > 1
MATCH (:Event {activity: "O_Created"})<-[:O_DF]-(e:Event {activity: "O_Cancelled"}) -[:EVENT_TO_OFFER]-> (o:Offer) -[rel:OFFER_TO_CASE]-> (c)
WITH c AS c, e AS O_Cancelled, o AS o
MATCH p = (A_Created:Event {activity: "A_Create Application"}) <-[:DF*]-(O_Cancelled:Event {activity: "O_Cancelled"}), (O_Cancelled) -[:EVENT_TO_CASE]-> (c)
RETURN p,c,o



